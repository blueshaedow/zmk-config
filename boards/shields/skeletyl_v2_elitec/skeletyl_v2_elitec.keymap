/*
 * Copyright (c) 2020 ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


#define DEFAULT 0
#define NAV     1
#define SYM     2


#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

#define TAP_DANCE(NAME, KP1, KP2) \
    td_##NAME { \
        compatible = "zmk,behavior-tap-dance"; \
        #binding-cells = <0>; \
        tapping-term-ms = <200>; \
        bindings = <KP1>, <KP2>; \
    };




/ {
    behaviors {
        TAP_DANCE(td0, &kp GRAVE, &kp TILDE)
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
        };
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;
        };
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;
        };
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };
        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
        };
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        // W or ctrl-C (copy)
        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp W>, <&kp LC(C)>;
        };
        // P or ctrl+V (paste)
        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp V>, <&kp LC(V)>;
        };
        // A or ctrl+tab (next open tab)
        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp A>, <&kp LC(TAB)>;
        };
        // Q or ctrl-shift-tab (previous open tab)
        td9: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp LC(LS(TAB))>;
        };
    };

	
	keymap {
		compatible = "zmk,keymap";

		DEFAULT {
// ------------------------------------------------------------------------------------------------------------
// |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |
// |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |
// |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   /   |
//                    | CTRL | SPCE | LOWER|            | RAISE| ENTR  | RGUI|
            bindings = <
&td9    	    &td6  		&kp F           &kp P        	&kp B              &kp J       		&kp L      	    &kp U               &kp Y               &kp SEMICOLON
&td8    	    &kp R  		&kp S           &kp T        	&kp G              &kp M       		&kp N      	    &kp E               &kp I               &kp O        
&bhm LGUI Z     &bhm LALT X &bhm LSHFT C    &bhm LCTRL D    &td7               &kp K       		&bhm RCTRL H    &bhm RSHFT COMMA    &bhm RALT PERIOD    &bhm RGUI SLASH    
              			    &to NAV         &kp SPACE    	&kp BACKSPACE      &kp DELETE  		&kp ENTER	&sl SYM
            >;
		};

	NAV {
            bindings = <
&kp LC(LS(M))   &none               &none          	&mkp LCLK		&mkp RCLK          	&none   		&none   	&kp C_MUTE	&kp C_VOL_UP	&kp C_VOL_DN
&kp LC(LS(H))   &none               &none           &none           &none              	&kp LEFT       	&kp DOWN   	&kp UP     	&kp RIGHT      	&kp PLUS        
&none   	    &none   	        &mkp MCLK	    &mkp MB4   		&mkp MB5           	&kp HOME       	&kp PG_DN  	&kp PG_UP  	&kp END	 	  	&kp MINUS    
              			            &kp LALT   	    &to DEFAULT  	&none             	&kp LGUI  		&kp RSHFT	&none
            >;
		};

	SYM {
            bindings = <
&kp N1  	&kp N2		&kp N3 		&kp N4			&kp N5          	&kp N6			&kp N7		&kp N8		&kp N9			&kp N0
&td0		&kp LBRC	&kp RBRC	&td1       		&td2              	&td3          	&td4       	&td10     	&kp LPAR      	&kp RPAR        
&kp EXCL	&kp AT		&kp HASH	&kp DLLR		&kp PRCNT	      	&kp CARET      	&kp AMPS  	&kp ASTRK  	&td5     	  	&kp CAPSLOCK    
              			&kp ESC    	&kp TAB		  	&none               &bt BT_CLR_ALL	&none   	&none
            >;
		};
	};
};


// &msc SCRL_DOWN	    &msc SCRL_UP
// &mmv MOVE_LEFT		&mmv MOVE_UP  	&mmv MOVE_DOWN  &mmv MOVE_RIGHT 
// see https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// pending PR -p 